run:
primClassif subClassif   tokenStr
  1 Int i;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ;
  2 Float pi;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   pi
SEPARATOR   n/a          ;
  3 String day;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   day
SEPARATOR   n/a          ;
  4    day 
OPERAND     IDENTIFIER   day
  5    = 
OPERATOR    n/a          =
  6    "Sunday";
OPERAND     STRING       Sunday
                               
SEPARATOR   n/a          ;
  7 String name;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   name
SEPARATOR   n/a          ;
  8 name = "Anita Goodgrade";
OPERAND     IDENTIFIER   name
OPERATOR    n/a          =
OPERAND     STRING       Anita Goodgrade
                                        
SEPARATOR   n/a          ;
  9 String weird;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   weird
SEPARATOR   n/a          ;
  10 weird = "\tTX\tTexas\n";
OPERAND     IDENTIFIER   weird
OPERATOR    n/a          =
OPERAND     STRING       . TX. Texas. 
                         09  09     0A
SEPARATOR   n/a          ;
  11 String loc;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          ;
  12 loc = "TX";
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          =
  13
OPERAND     STRING       TX
                           
  13
  14 // numeric stuff
  15 print(">>> Checking datatype results based on left operand");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Checking datatype results based on left operand
                                                                            
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  16 pi = 3.14;
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          =
OPERAND     FLOAT        3.14
SEPARATOR   n/a          ;
  17 Float area;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          ;
  18 Float radius2;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   radius2
SEPARATOR   n/a          ;
  19 Int radius;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ;
  20 radius = 8;
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          =
OPERAND     INTEGER      8
SEPARATOR   n/a          ;
  21 radius2 = radius ^ 2;  // square the radius
OPERAND     IDENTIFIER   radius2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
  22 print("\t1. area all float");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 1. area all float
                         09                 
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  23 area = pi * radius2;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius2
SEPARATOR   n/a          ;
  24 print("\tradius="
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
  25       ,  radius
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
  26       ,  "radius2="
SEPARATOR   n/a          ,
OPERAND     STRING       radius2=
                                 
  27       ,  radius2
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius2
  28       ,  "area="
SEPARATOR   n/a          ,
OPERAND     STRING       area=
                              
  29       ,  area);
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  30 Int irad2;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   irad2
SEPARATOR   n/a          ;
  31 irad2 = radius ^ 2;
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
SEPARATOR   n/a          ;
  32 print("\x2. area using int radius as left operand");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       \x2. area using int radius as left operand
                                                                   
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  33 area = irad2 * pi;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
SEPARATOR   n/a          ;
  34 print("\tradius=", radius, "irad2=", irad2, "area=", area);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       irad2=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   irad2
SEPARATOR   n/a          ,
OPERAND     STRING       area=
                              
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  35 Float circum;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          ;
  36 Float twoPi;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ;
  37 print("\t3. circumference using twoPi as float * int");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 3. circumference using twoPi as float * int
                         09                                           
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  38 twoPi = pi * 2;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     INTEGER      2
SEPARATOR   n/a          ;
  39 circum = twoPi * radius;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ;
  40 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  41 print("\t4. circumference using twoPi as int * float");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 4. circumference using twoPi as int * float
                         09                                           
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  42 twoPi = 2 * pi;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     INTEGER      2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
SEPARATOR   n/a          ;
  43 circum = twoPi * radius;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ;
  44 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
  45
SEPARATOR   n/a          )
  45
  46 // Simple if
  47 i = 0;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      0
SEPARATOR   n/a          ;
  48 print(">>> First If");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> First If
                                     
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  49 if loc == "TX": // check for TX
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          ==
OPERAND     STRING       TX
                           
  50     // It is TX
  51     print("\tloc is", loc);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . loc is
                         09      
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
  52     // it is ok to have this statement on multiple lines.  
  53     // That is why we have a semicolon
  54     i 
OPERAND     IDENTIFIER   i
  55        = 
OPERATOR    n/a          =
  56           i 
OPERAND     IDENTIFIER   i
  57           + 1;
OPERATOR    n/a          +
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  58 endif;
CONTROL     END          endif
SEPARATOR   n/a          ;
  59 print("\tDone with first if");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . Done with first if
                         09                  
  60
SEPARATOR   n/a          )
  60
SEPARATOR   n/a          ;
  61 print(">>> Second If");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Second If
                                      
SEPARATOR   n/a          )
  62 // if then else
  63 if i >= 5:
CONTROL     FLOW         if
OPERAND     IDENTIFIER   i
OPERATOR    n/a          >=
OPERAND     INTEGER      5
OPERATOR    n/a          :
  64     print("\t2nd if true, i >= 5, i =", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 2nd if true, i >= 5, i =
                         09                        
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  65 else:
CONTROL     END          else
OPERATOR    n/a          :
  66     print("\t2nd if false, i >= 5, i =", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 2nd if false, i >= 5, i =
                         09                         
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  67 endif;
CONTROL     END          endif
  68 // while and if 
  69 print(">>> First while i < 5");    
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> First while i < 5
                                              
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  70 i = 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  71 while i < 5:
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      5
OPERATOR    n/a          :
  72     print("\ttop of while, i=", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . top of while, i=
                         09                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  73     if i < 3:
CONTROL     FLOW         if
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      3
OPERATOR    n/a          :
  74         print("\twhile first if true i<3, i=", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if true i<3, i=
                         09                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  75         i = i + 2;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      2
SEPARATOR   n/a          ;
  76         if loc != "TX":
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          !=
OPERAND     STRING       TX
                           
OPERATOR    n/a          :
  77              print("\t\twhile inner if true ... wrong!");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while inner if true ... wrong!
                         0909                              
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  78         else:
CONTROL     END          else
OPERATOR    n/a          :
  79              print('\t\twhile inner if false, loc!=\'TX\', loc is', loc);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       '. . while inner if false, loc!=\'TX\', loc is'
                          0909                                          
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  80         endif;
CONTROL     END          endif
SEPARATOR   n/a          ;
  81     else:
CONTROL     END          else
OPERATOR    n/a          :
  82         print("\twhile first if false i<3, i=", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if false i<3, i=
                         09                            
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  83         if loc=="TX":
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          ==
OPERAND     STRING       TX
                           
OPERATOR    n/a          :
  84              print("\t\twhile 2nd inner if true loc=='TX', loc is", loc);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while 2nd inner if true loc=='TX', loc is
                         0909                                         
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  85              i = i + 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  86         else:
CONTROL     END          else
OPERATOR    n/a          :
  87              print("\t\twhile 2nd inner if false ... wrong");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while 2nd inner if false ... wrong
                         0909                                  
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  88              i = i + 10;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      10
SEPARATOR   n/a          ;
  89         endif;
CONTROL     END          endif
SEPARATOR   n/a          ;
  90         print("\twhile first if false after inner if");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if false after inner if
                         09                                   
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  91     endif;
CONTROL     END          endif
SEPARATOR   n/a          ;
  92     print("\tbottom of while, i=", i);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . bottom of while, i=
                         09                   
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  93 endwhile;
CONTROL     END          endwhile
SEPARATOR   n/a          ;
  94 print("\tAfter first while");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . After first while
                         09                 
  95
SEPARATOR   n/a          )
  95
  96 // nested while loops
  97 print(">>> Second while i < 5 ... with nested while");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Second while i < 5 ... with nested while
                                                                     
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  98 i = 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  99 Int j;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          ;
  100 Bool bFlag;
CONTROL     DECLARE      Bool
OPERAND     IDENTIFIER   bFlag
SEPARATOR   n/a          ;
  101 bFlag = T;
OPERAND     IDENTIFIER   bFlag
OPERATOR    n/a          =
OPERAND     BOOLEAN      T
SEPARATOR   n/a          ;
  102 while i < 5:
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      5
OPERATOR    n/a          :
  103     j = i;
OPERAND     IDENTIFIER   j
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ;
  104     print("\ttop of while, i=", i, "j=", j);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . top of while, i=
                         09                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ,
OPERAND     STRING       j=
                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  105     print("\t>>> Inner while j <= 3");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . >>> Inner while j <= 3
                         09                      
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  106     while  j <= 3:
CONTROL     FLOW         while
OPERAND     IDENTIFIER   j
OPERATOR    n/a          <=
OPERAND     INTEGER      3
OPERATOR    n/a          :
  107         print("\t\tinner while, j=", j);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . inner while, j=
                         0909               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  108         j = j + 1;
OPERAND     IDENTIFIER   j
OPERATOR    n/a          =
OPERAND     IDENTIFIER   j
OPERATOR    n/a          +
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  109     endwhile;
CONTROL     END          endwhile
SEPARATOR   n/a          ;
  110     bFlag = F;
OPERAND     IDENTIFIER   bFlag
OPERATOR    n/a          =
OPERAND     BOOLEAN      F
SEPARATOR   n/a          ;
  111     print("\tbottom of while, i=", i, "j=", j);
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . bottom of while, i=
                         09                   
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ,
OPERAND     STRING       j=
                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
SEPARATOR   n/a          ;
  112     i = i + 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
SEPARATOR   n/a          ;
  113 endwhile;
CONTROL     END          endwhile
SEPARATOR   n/a          ;
  114 print("\tAfter outer while");
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . After outer while
                         09                 
SEPARATOR   n/a          )
SEPARATOR   n/a          ;