run:
primClassif subClassif   tokenStr
  1 Int i;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   i
  2 Float pi;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   pi
  3 String day;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   day
  4    day 
SEPARATOR   n/a          ;
  5    = 
OPERAND     IDENTIFIER   day
  6    "Sunday";
OPERATOR    n/a          =
OPERAND     STRING       Sunday
                               
  7 String name;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   name
  8 name = "Anita Goodgrade";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   name
OPERATOR    n/a          =
OPERAND     STRING       Anita Goodgrade
                                        
  9 String weird;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   weird
  10 weird = "\tTX\tTexas\n";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   weird
OPERATOR    n/a          =
OPERAND     STRING       . TX. Texas. 
                         09  09     0A
  11 String loc;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   loc
  12 loc = "TX";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          =
OPERAND     STRING       TX
                           
  13 
  14 // numeric stuff
  15 print(">>> Checking datatype results based on left operand");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Checking datatype results based on left operand
                                                                            
SEPARATOR   n/a          )
  16 pi = 3.14;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          =
OPERAND     FLOAT        3.14
  17 Float area;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   area
  18 Float radius2;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   radius2
  19 Int radius;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   radius
  20 radius = 8;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          =
OPERAND     INTEGER      8
  21 radius2 = radius ^ 2;  // square the radius
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   radius2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
  22 print("\t1. area all float");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 1. area all float
                         09                 
SEPARATOR   n/a          )
  23 area = pi * radius2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius2
  24 print("\tradius="
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
  25       ,  radius
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
  26       ,  "radius2="
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
  27       ,  radius2
OPERAND     STRING       radius2=
                                 
SEPARATOR   n/a          ,
  28       ,  "area="
OPERAND     IDENTIFIER   radius2
SEPARATOR   n/a          ,
  29       ,  area);
OPERAND     STRING       area=
                              
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
  30 Int irad2;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   irad2
  31 irad2 = radius ^ 2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
  32 print("\t2. area using int radius as left operand");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 2. area using int radius as left operand
                         09                                        
SEPARATOR   n/a          )
  33 area = irad2 * pi;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
  34 print("\tradius=", radius, "irad2=", irad2, "area=", area);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       irad2=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   irad2
SEPARATOR   n/a          ,
OPERAND     STRING       area=
                              
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
  35 Float circum;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   circum
  36 Float twoPi;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   twoPi
  37 print("\t3. circumference using twoPi as float * int");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 3. circumference using twoPi as float * int
                         09                                           
SEPARATOR   n/a          )
  38 twoPi = pi * 2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     INTEGER      2
  39 circum = twoPi * radius;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
  40 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          )
  41 print("\t4. circumference using twoPi as int * float");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 4. circumference using twoPi as int * float
                         09                                           
SEPARATOR   n/a          )
  42 twoPi = 2 * pi;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     INTEGER      2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
  43 circum = twoPi * radius;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
  44 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          )
  45 
  46 // Simple if
  47 i = 0;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      0
  48 print(">>> First If");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> First If
                                     
SEPARATOR   n/a          )
  49 if loc == "TX": / /  not a comment and is not an error for the scanner
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          ==
OPERAND     STRING       TX
                           
OPERATOR    n/a          :
OPERATOR    n/a          /
OPERATOR    n/a          /
OPERATOR    n/a          no
OPERAND     IDENTIFIER   t
OPERAND     IDENTIFIER   a
OPERAND     IDENTIFIER   comment
OPERATOR    n/a          an
OPERAND     IDENTIFIER   d
OPERAND     IDENTIFIER   is
OPERATOR    n/a          no
OPERAND     IDENTIFIER   t
OPERAND     IDENTIFIER   an
OPERAND     IDENTIFIER   error
CONTROL     FLOW         for
OPERAND     IDENTIFIER   the
  50     // It is TX
  51     print("\tloc is", loc);
OPERAND     IDENTIFIER   scanner
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . loc is
                         09      
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
  52     // it is ok to have this statement on multiple lines.  
  53     // That is why we have a semicolon
  54     i 
SEPARATOR   n/a          ;
  55        = 
OPERAND     IDENTIFIER   i
  56           i 
OPERATOR    n/a          =
  57           + 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
  58 endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  59 print("\tDone with first if");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . Done with first if
                         09                  
SEPARATOR   n/a          )
  60 
  61         
SEPARATOR   n/a          ;
