[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------------< groupId:Pickle >---------------------------
[INFO] Building Pickle 2.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- exec-maven-plugin:3.0.0:java (default-cli) @ Pickle ---
run:
primClassif subClassif   tokenStr
  1 Int i;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   i
  2 Float pi;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   pi
  3 String day;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   day
  4    day 
SEPARATOR   n/a          ;
  5    = 
OPERAND     IDENTIFIER   day
  6    "Sunday";
OPERATOR    n/a          =
OPERAND     STRING       Sunday
                               
  7 String name;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   name
  8 name = "Anita Goodgrade";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   name
OPERATOR    n/a          =
OPERAND     STRING       Anita Goodgrade
                                        
  9 String weird;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   weird
  10 weird = "\tTX\tTexas\n";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   weird
OPERATOR    n/a          =
OPERAND     STRING       . TX. Texas. 
                         09  09     0A
  11 String loc;
SEPARATOR   n/a          ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   loc
  12 loc = "TX";
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          =
OPERAND     STRING       TX
                           
  13 
  14 // numeric stuff
  15 print(">>> Checking datatype results based on left operand");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Checking datatype results based on left operand
                                                                            
SEPARATOR   n/a          )
  16 pi = 3.14;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          =
OPERAND     FLOAT        3.14
  17 Float area;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   area
  18 Float radius2;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   radius2
  19 Int radius;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   radius
  20 radius = 8;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          =
OPERAND     INTEGER      8
  21 radius2 = radius ^ 2;  // square the radius
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   radius2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
  22 print("\t1. area all float");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 1. area all float
                         09                 
SEPARATOR   n/a          )
  23 area = pi * radius2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius2
  24 print("\tradius="
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
  25       ,  radius
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
  26       ,  "radius2="
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
  27       ,  radius2
OPERAND     STRING       radius2=
                                 
SEPARATOR   n/a          ,
  28       ,  "area="
OPERAND     IDENTIFIER   radius2
SEPARATOR   n/a          ,
  29       ,  area);
OPERAND     STRING       area=
                              
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
  30 Int irad2;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   irad2
  31 irad2 = radius ^ 2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          =
OPERAND     IDENTIFIER   radius
OPERATOR    n/a          ^
OPERAND     INTEGER      2
  32 print("\x2. area using int radius as left operand");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       \x2. area using int radius as left operand
                                                                   
SEPARATOR   n/a          )
  33 area = irad2 * pi;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   area
OPERATOR    n/a          =
OPERAND     IDENTIFIER   irad2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
  34 print("\tradius=", radius, "irad2=", irad2, "area=", area);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       irad2=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   irad2
SEPARATOR   n/a          ,
OPERAND     STRING       area=
                              
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   area
SEPARATOR   n/a          )
  35 Float circum;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   circum
  36 Float twoPi;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   twoPi
  37 print("\t3. circumference using twoPi as float * int");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 3. circumference using twoPi as float * int
                         09                                           
SEPARATOR   n/a          )
  38 twoPi = pi * 2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     IDENTIFIER   pi
OPERATOR    n/a          *
OPERAND     INTEGER      2
  39 circum = twoPi * radius;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
  40 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          )
  41 print("\t4. circumference using twoPi as int * float");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 4. circumference using twoPi as int * float
                         09                                           
SEPARATOR   n/a          )
  42 twoPi = 2 * pi;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          =
OPERAND     INTEGER      2
OPERATOR    n/a          *
OPERAND     IDENTIFIER   pi
  43 circum = twoPi * radius;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   circum
OPERATOR    n/a          =
OPERAND     IDENTIFIER   twoPi
OPERATOR    n/a          *
OPERAND     IDENTIFIER   radius
  44 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . radius=
                         09       
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   radius
SEPARATOR   n/a          ,
OPERAND     STRING       twoPi=
                               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   twoPi
SEPARATOR   n/a          ,
OPERAND     STRING       circum=
                                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   circum
SEPARATOR   n/a          )
  45 
  46 // Simple if
  47 i = 0;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      0
  48 print(">>> First If");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> First If
                                     
SEPARATOR   n/a          )
  49 if loc == "TX": // check for TX
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          ==
OPERAND     STRING       TX
                           
  50     // It is TX
  51     print("\tloc is", loc);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . loc is
                         09      
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
  52     // it is ok to have this statement on multiple lines.  
  53     // That is why we have a semicolon
  54     i 
SEPARATOR   n/a          ;
  55        = 
OPERAND     IDENTIFIER   i
  56           i 
OPERATOR    n/a          =
  57           + 1;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
  58 endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  59 print("\tDone with first if");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . Done with first if
                         09                  
SEPARATOR   n/a          )
  60 
  61 print(">>> Second If");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Second If
                                      
SEPARATOR   n/a          )
  62 // if then else
  63 if i >= 5:
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   i
OPERATOR    n/a          >=
OPERAND     INTEGER      5
  64     print("\t2nd if true, i >= 5, i =", i);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 2nd if true, i >= 5, i =
                         09                        
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  65 else:
SEPARATOR   n/a          ;
CONTROL     END          else
  66     print("\t2nd if false, i >= 5, i =", i);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . 2nd if false, i >= 5, i =
                         09                         
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  67 endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  68 // while and if 
  69 print(">>> First while i < 5");    
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> First while i < 5
                                              
SEPARATOR   n/a          )
  70 i = 1;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      1
  71 while i < 5:
SEPARATOR   n/a          ;
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      5
  72     print("\ttop of while, i=", i);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . top of while, i=
                         09                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  73     if i < 3:
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      3
  74         print("\twhile first if true i<3, i=", i);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if true i<3, i=
                         09                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  75         i = i + 2;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      2
  76         if loc != "TX":
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          !=
OPERAND     STRING       TX
                           
  77              print("\t\twhile inner if true ... wrong!");
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while inner if true ... wrong!
                         0909                              
SEPARATOR   n/a          )
  78         else:
SEPARATOR   n/a          ;
CONTROL     END          else
  79              print('\t\twhile inner if false, loc!=\'TX\', loc is', loc);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       '. . while inner if false, loc!=\'TX\', loc is'
                          0909                                          
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
  80         endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  81     else:
SEPARATOR   n/a          ;
CONTROL     END          else
  82         print("\twhile first if false i<3, i=", i);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if false i<3, i=
                         09                            
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  83         if loc=="TX":
SEPARATOR   n/a          ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    n/a          ==
OPERAND     STRING       TX
                           
  84              print("\t\twhile 2nd inner if true loc=='TX', loc is", loc);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while 2nd inner if true loc=='TX', loc is
                         0909                                         
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   loc
SEPARATOR   n/a          )
  85              i = i + 1;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
  86         else:
SEPARATOR   n/a          ;
CONTROL     END          else
  87              print("\t\twhile 2nd inner if false ... wrong");
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . while 2nd inner if false ... wrong
                         0909                                  
SEPARATOR   n/a          )
  88              i = i + 10;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      10
  89         endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  90         print("\twhile first if false after inner if");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . while first if false after inner if
                         09                                   
SEPARATOR   n/a          )
  91     endif;
SEPARATOR   n/a          ;
CONTROL     END          endif
  92     print("\tbottom of while, i=", i);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . bottom of while, i=
                         09                   
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          )
  93 endwhile;
SEPARATOR   n/a          ;
CONTROL     END          endwhile
  94 print("\tAfter first while");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . After first while
                         09                 
SEPARATOR   n/a          )
  95 
  96 // nested while loops
  97 print(">>> Second while i < 5 ... with nested while");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       >>> Second while i < 5 ... with nested while
                                                                     
SEPARATOR   n/a          )
  98 i = 1;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     INTEGER      1
  99 Int j;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   j
  100 Bool bFlag;
SEPARATOR   n/a          ;
CONTROL     DECLARE      Bool
OPERAND     IDENTIFIER   bFlag
  101 bFlag = T;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   bFlag
OPERATOR    n/a          =
OPERAND     BOOLEAN      T
  102 while i < 5:
SEPARATOR   n/a          ;
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    n/a          <
OPERAND     INTEGER      5
  103     j = i;
OPERATOR    n/a          :
OPERAND     IDENTIFIER   j
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
  104     print("\ttop of while, i=", i, "j=", j);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . top of while, i=
                         09                
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ,
OPERAND     STRING       j=
                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
  105     print("\t>>> Inner while j <= 3");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . >>> Inner while j <= 3
                         09                      
SEPARATOR   n/a          )
  106     while  j <= 3:
SEPARATOR   n/a          ;
CONTROL     FLOW         while
OPERAND     IDENTIFIER   j
OPERATOR    n/a          <=
OPERAND     INTEGER      3
  107         print("\t\tinner while, j=", j);
OPERATOR    n/a          :
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . . inner while, j=
                         0909               
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
  108         j = j + 1;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   j
OPERATOR    n/a          =
OPERAND     IDENTIFIER   j
OPERATOR    n/a          +
OPERAND     INTEGER      1
  109     endwhile;
SEPARATOR   n/a          ;
CONTROL     END          endwhile
  110     bFlag = F;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   bFlag
OPERATOR    n/a          =
OPERAND     BOOLEAN      F
  111     print("\tbottom of while, i=", i, "j=", j);
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . bottom of while, i=
                         09                   
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   i
SEPARATOR   n/a          ,
OPERAND     STRING       j=
                           
SEPARATOR   n/a          ,
OPERAND     IDENTIFIER   j
SEPARATOR   n/a          )
  112     i = i + 1;
SEPARATOR   n/a          ;
OPERAND     IDENTIFIER   i
OPERATOR    n/a          =
OPERAND     IDENTIFIER   i
OPERATOR    n/a          +
OPERAND     INTEGER      1
  113 endwhile;
SEPARATOR   n/a          ;
CONTROL     END          endwhile
  114 print("\tAfter outer while");
SEPARATOR   n/a          ;
FUNCTION    BUILTIN      print
SEPARATOR   n/a          (
OPERAND     STRING       . After outer while
                         09                 
SEPARATOR   n/a          )
  115         
SEPARATOR   n/a          ;
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.790 s
[INFO] Finished at: 2021-02-26T16:59:26-06:00
[INFO] ------------------------------------------------------------------------
